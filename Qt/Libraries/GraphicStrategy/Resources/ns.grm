"Name"     = 'Neobot Script'
"Author"   = 'Neobot'
"Version"  = '1.0'
"About"    = ''

"Case Sensitive" = False 
"Start Symbol" = <Start>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{WS}           = {Whitespace} - {CR} - {LF}
{String Chars} = {Printable} + {HT} - ["\]
{IdCharacter} = {String Chars} - [:]
{Non Blank String Chars} =  {String Chars} -  {Whitespace}    
                         
{Id Head}        = {Letter} + [_]
{Id Tail}        = {Id Head} + {Digit}       

! -------------------------------------------------
! Terminals
! -------------------------------------------------

! The following defines the Whitespace terminal using the {WS}
! set - which excludes the carriage return and line feed 
! characters

Whitespace    = {WS}+

NewLine       = {CR}{LF} | {CR} | {LF}

Identifier    = {Id Head}{Id Tail}* 
String =  '"' {String Chars}* '"'        

Integer = {Digit}+
Float  = {Digit}+ '.' {Digit}+ 

Comment Start = '/*'
Comment End   = '*/'
Comment Line  = '//'



! -------------------------------------------------
! Rules
! -------------------------------------------------

! The following rule defines a series of newline tokens.
! Use this rule rather than the newline terminal.

<nl>     ::= NewLine <nl>          !One or more
          |  NewLine

<nl Opt> ::= NewLine <nl Opt>      !Zero or more
          |  !Empty

<statement_end> ::= ';' <nl Opt>
                 | <nl>
                 | eof
                 

! Global concepts
<opt_bracket> ::= '('
               | !Empty
               
<id> ::= Integer
<num> ::= Float | Integer

<speed> ::= 'speed' Integer '%'
 
<fixed_angle> ::= <num> 'deg'
               |  <num> 'rad'     
               |  <num>                             
<angle> ::= <fixed_angle>
        |  'auto' 'reversed' <fixed_angle>   
        |  'reversed' <fixed_angle>   
                
<time_unit> ::= 's' | 'ms'
<time> ::= Integer <time_unit>
<opt_time> ::= <time> | <>   
            
<string_or_var> ::= String | <var>     
        
<var> ::= Identifier 
       
<angleRange> ::= <angle> '-' <angle>
                      
<fixed_point> ::= <opt_bracket> <num> ',' <num> <opt_bracket>
               |  <opt_bracket> <num> ',' <num> ',' <fixed_angle> <opt_bracket>   
<point> ::= <fixed_point> 
         |  'auto' 'reversed' <fixed_point>  
         |  'reversed' <fixed_point>          
<point_or_var> ::= <point> | <var>         


<fixed_rect> ::= 'rect' <num> ',' <num> ',' <num> ',' <num> 
<rect> ::= <fixed_rect> 
        |  'auto' 'reversed' <fixed_rect>     
        |  'reversed' <fixed_rect>     
<rect_or_var> ::= <rect> | <var> 
                
           
<direction> ::= 'forward' | 'backward' | 'auto'
          
<sensor> ::= 'color' 'sensor' | 'microswitch' | 'sharp'
<sensor_identifier> ::= <sensor> <id>
<sensor_or_var> ::=  <sensor_identifier> | <var>                   
   
<colorSensorValue> ::= 'unknown' | 'red' | 'green' | 'blue' | 'yellow' | 'white' | 'black'
<sharpValue> ::= 'detected' | 'far' | 'close'        
<microSwitchValue> ::= 'on' | 'off'                       
<sensorValue> ::= <colorSensorValue> | <sharpValue> | <microSwitchValue> | <num>
 
<concurrencyCondition> ::= 'AllActionsFinished' | 'OneActionFinished' | 'FirstActionFinished' | 'LastActionFinished'          

<action> ::=  'action' Integer ',' Integer ',' <time>     
<action_or_var> ::= <action> | <var>
                 
<parameter_identifier> ::= 'parameter' <id>
<parameter_or_var> ::= <parameter_identifier> | <var>
                    
<ax12_identifier> ::= 'ax12' <id>
<ax12_or_var> ::= <ax12_identifier> | <var>                  

! Program

<Start>   ::= <nl opt> <Program>
<Program> ::= <Statements>

<Statements> ::= <Statement> <Statements> 
              |  !Empty
              
! To complete
<Statement> ::= <ImportStatement> <statement_end>
             | <WaitStatement> <statement_end>
             | <DeclareStatement> <statement_end>
             | <TeleportStatement> <statement_end>
             | <MoveToStatement> <statement_end>
             | <RotateToSTatement> <statement_end>
             | <SetParamStatement> <statement_end>
             | <EnableSensorStatement> <statement_end>
             | <DisableSensorStatement> <statement_end>
             | <Ax12MovementStatement> <statement_end>
             | <Ax12AsyncMovementStatement> <statement_end>
             | <MoveAx12Statement> <statement_end>
             | <ActuatorStatement> <statement_end>
             | <ListStatement> <statement_end>
             | <ConcurrentStatement> <statement_end>
             | <ConditionStatement>
             | <WhileStatement>
!             | <SwitchStatement>   
             | <FunctionStatement> <statement_end>
             | <CallStatement> <statement_end>
             | <TimeOutStatement>
             
<ImportStatement> ::= 'import' String
       
<WaitStatement> ::= 'wait' <time>     

<DeclareStatement> ::= 'declare' <action> 'as' <var>
                    |  'declare' <sensor_identifier> 'as' <var> 
                    |  'declare' <parameter_identifier> 'as' <var>                     
                    |  'declare' <point> 'as' <var>  
                    |  'declare' <rect> 'as' <var> 
                    |  'declare' <ax12_identifier> 'as' <var> 
                    |  'declare' String 'as' <var> 
                                                                                           
<TeleportStatement> ::= 'teleport' <point_or_var> 
<MoveToStatement> ::= 'go' 'to' <point_or_var>  
                   |  'go' 'to' <point_or_var> <speed>  
<RotateToSTatement> ::= 'rotate' 'to' <angle>  
                   |  'rotate' 'to' <angle> <speed>  
                   |  'rotate' 'to' <angle> <direction>  
                   |  'rotate' 'to' <angle> <speed> <direction>  
                   |  'rotate' 'to' <angle> <direction> <speed>                   
                           
<ListStatement> ::= '{' <nl Opt> <Statements> <nl Opt> '}'
<ConcurrentStatement> ::= 'concurrent' <nl Opt> <ListStatement>                       
                       | 'concurrent' <concurrencyCondition> <nl Opt> <ListStatement>
                       
<TimeOutStatement> ::= 'timeout' <time> <nl Opt> <Statement> 
                    
<SetParamStatement> ::= 'set' <parameter_or_var> '=' <num>       
                                                  
<EnableSensorStatement> ::= 'enable' <sensor_or_var> 
                         |  'enable' 'all' <sensor> 
<DisableSensorStatement> ::= 'disable' <sensor_or_var>  
                          |  'disable' 'all' <sensor>     
                          
<Ax12MovementStatement> ::= 'make' 'ax12' 'movement' <string_or_var> <string_or_var>
                         |  'make' 'ax12' 'movement' <string_or_var> <string_or_var> <speed> 
<Ax12AsyncMovementStatement> ::= 'make' 'ax12' 'async' 'movement' <string_or_var> <string_or_var>
                              |  'make' 'ax12' 'async' 'movement' <string_or_var> <string_or_var> <speed> 
<MoveAx12Statement> ::= 'move' <ax12_or_var> 'to' <angle>    
                     |  'move' <ax12_or_var> 'to' <angle> <speed>    
                     
<ActuatorStatement> ::= 'do' <action_or_var>                    
                                      
    !if      
<ConditionIsOperator> ::= 'is' | 'is' 'not'
<ConditionInOperator> ::= 'in' | 'not' 'in'                      
<SensorCondition> ::= <sensor_or_var> <ConditionIsOperator> <sensorValue>
<OrientationCondition> ::= 'orientation' <ConditionInOperator> <angleRange>
<PositionCondition> ::= 'position' <ConditionInOperator> <rect_or_var>
<OpponentCondition> ::= 'opponent' <ConditionInOperator> <rect_or_var>
<reverseCondition> ::= 'strategy' <ConditionIsOperator> 'reversed'                                                                              
<IfCondition> ::= <SensorCondition> | <OrientationCondition> | <PositionCondition> | <OpponentCondition> | <reverseCondition> | 'true' | 'false'
                                    
<ConditionStatement> ::= 'if' <IfCondition> <nl Opt> <Statement>
                      |  'if' <IfCondition> <nl Opt> <Statement> 'else' <nl Opt> <Statement>              

    !while
<WhileStatement> ::= 'while' <IfCondition> <opt_time> <nl Opt> <Statement>
                  
    !switch
!<SwitchStatement> ::= 'switch' <SwitchCondition> <nl Opt> '{' <nl Opt> <switch_cases> <nl Opt> '}' 
!<SwitchCondition> ::= 'orientation' | 'position' | 'opponent' | <sensor_or_var> 

!<switch_cases> ::= <switch_case> <switch_cases>  
!                | <>  
                               
!<switch_case> ::= 'case' <switch_value> <nl Opt> <Statements>
!               |  'defaults' <nl Opt> <Statements>
               
!<switch_value> ::= <sensorValue> | <angleRange> | <rect_or_var>

    !functions
<varList> ::= <var> ',' <varList>
           | <var>
           | 
           
<FunctionStatement> ::= 'function' <var> '(' <varList> ')' <nl Opt> <ListStatement>  
        
<CallArg> ::= <var>
           | '[' <point> ']'
           | '[' <rect> ']'
           | <action>
           | <sensor_identifier>
           | <parameter_identifier>
           | <ax12_identifier>
           
<CallArgList> ::= <CallArg> ',' <CallArgList>
           | <CallArg>
           | 
           
<CallStatement> ::= <var>  '(' <CallArgList> ')'   
                                   
